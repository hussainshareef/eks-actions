name: CI-CD for bank project

on:
  push:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      language:
        description: 'Select the project language'
        required: true
        default: 'java'
        type: choice
        options:
          - java
          - python
          - nodejs

jobs:

  compile-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        language: [java, python, nodejs]
        include:
          - os: ubuntu-latest
            language: java
            java: 17
            is_primary: true
          - os: windows-latest
            language: java
            java: 11
            is_primary: false
          - os: ubuntu-latest
            language: python
            python: '3.11'
            is_primary: true
          - os: windows-latest
            language: python
            python: '3.9'
            is_primary: false
          - os: ubuntu-latest
            language: nodejs
            node: '20.x'
            is_primary: true
          - os: windows-latest
            language: nodejs
            node: '18.x'
            is_primary: false

    # <-- ADD THIS JOB-LEVEL IF CONDITION
    if: ${{ github.event.inputs.language == matrix.language }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        if: ${{ matrix.language == 'java' }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: temurin
          cache: maven

      - name: Build with Maven
        if: ${{ matrix.language == 'java' }}
        run: mvn compile

      - name: Unit Test Cases (Java)
        if: ${{ matrix.language == 'java' }}
        run: mvn test

      - name: Set up Python
        if: ${{ matrix.language == 'python' }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Install Python dependencies
        if: ${{ matrix.language == 'python' }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Python Tests
        if: ${{ matrix.language == 'python' }}
        run: pytest

      - name: Set up Node.js
        if: ${{ matrix.language == 'nodejs' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Install Node.js dependencies
        if: ${{ matrix.language == 'nodejs' }}
        run: npm install

      - name: Run Node.js Tests
        if: ${{ matrix.language == 'nodejs' }}
        run: npm test

      - name: Upload JAR artifact
        if: ${{ matrix.language == 'java' && matrix.is_primary == true }}
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  security-check:
    runs-on: ubuntu-latest
    needs: compile-and-test

    steps:
      - uses: actions/checkout@v4

      - name: Trivy Installation
        run: |
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update -y
          sudo apt-get install -y trivy

      - name: Trivy FS Scan
        run: trivy fs --format table -o fs-report.json .

      - name: Gitleaks Installation
        run: sudo apt install gitleaks -y

      - name: Gitleaks Code Scan
        run: gitleaks detect source . -r gitleaks-report.json -f json

  sonar_scan:
    runs-on: ubuntu-latest
    needs: compile-and-test

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: app

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.2.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          pollingTimeoutSec: 600
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

  build-and-push:
    runs-on: ubuntu-latest
    needs: compile-and-test

    steps:
      - uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: app

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: hussainshareef/bankapp:latest
          file: ./Dockerfile
